import { useState, useEffect, useContext } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { thunkLoadNotebooks } from "../../store/notebooks";
import { thunkLoadNotebookNotes } from '../../store/notes';
import NotebookForm from '../CreateForms/NotebookForm';
import TextNotebook from './TextNotebook';
import "./UserNotebooks.css"
import { ColorContext } from '../../context/ColorContext';

const UserNotebooks = () => {

    const dispatch = useDispatch();
    const notebooks = useSelector(state => state.notebooks?.userTextNotebooks);
    const [notebookAdded, setNotebookAdded] = useState(false);
    const [edited, setEdited] = useState(false);
    const [deleted, setDeleted] = useState(false);
    const [activeTab, setActiveTab] = useState(0);

    const { bgColor, changeBgColor } = useContext(ColorContext);

    useEffect(() => {
        dispatch(thunkLoadNotebooks());
        if (activeTab !== 0) dispatch(thunkLoadNotebookNotes(activeTab))
        setDeleted(false)
        setNotebookAdded(false)
    }, [dispatch, notebookAdded, activeTab, edited, deleted]);
    const colors = ['#F7931E', '#FF5733', '#C70039', '#87CEEB', '#FF69B4', '#FF007F', '#FFC300', '#00FFFF', '#E6E6FA', '#32CD32', '#900C3F', '#2E8B57', '#36454F', '#FFC0CB', '#DC143C', '#EEE8AA', '#DAA520', '#40E0D0', '#00A86B', '#008080', '#581845', '#006266', '#009432', '#1B1464', '#833471', '#BB2B1F', '#ED4C67', '#0066CC', '#27AE60', '#E67E22', '#D35400', '#8E44AD', '#2C3E50', '#34495E', '#7F8C8D'];

    return (
        <div className ="notebooks-component-wrapper">
            <div className="side-panel-container" style={{ backgroundColor: bgColor }}>
                <div className="tabs-container">
                    <div className="add-notebook-container notebook-tab" style={{ backgroundColor: colors[Math.floor(Math.random() * colors.length)] }}>
                        <NotebookForm setNotebookAdded={setNotebookAdded} notebookId={0} />
                    </div>
                    {Object.values(notebooks).map((notebook, index) => {
                        const color = colors[index % colors.length];
                        return (
                            <div
                                key={notebook.id}
                                className={activeTab === notebook.id ? 'notebook-tab active-tab' : 'notebook-tab'}
                                onClick={() => {
                                    setActiveTab(notebook.id)
                                    setEdited(false)
                                }}
                                style={{ backgroundColor: color }}
                            >
                                <h4>{notebook.name.length > 17 ? `${notebook.name.slice(0,17)}...`: notebook.name}</h4>
                            </div>
                        )
                    })}
                </div>
            </div>
            <div className="bg-image-container">
                <TextNotebook notebook={notebooks[activeTab]} tabState={{ activeTab, setActiveTab }} setNotebookAdded={setNotebookAdded} deletedState={{ deleted, setDeleted }} editState={{ edited, setEdited}} />
            </div>
        </div>
    );
};

export default UserNotebooks;






import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { thunkLoadNotebookNotes } from '../../store/notes';
import TextNoteCard from '../NotesComponents/TextNoteCard/TextNoteCard';
import NotebookHeader from './NotebookHeader';
import DeleteButton from "../Buttons/DeleteButton";
import TextEditor from '../TextEditor';

const TextNotebook = ({ notebook, setNotebookAdded, tabState, editState, deletedState }) => {
    const notes = useSelector(state => state.notes?.notebookNotes);
    const [noteList, setNoteList] = useState([]);
    const [selectedNote, setSelectedNote] = useState(null);
    const {edited, setEdited} = editState;
    const {deleted, setDeleted} = deletedState ? deletedState : {deleted : false, setDeleted : ()=>{}};
    const dispatch = useDispatch();
    const { activeTab, setActiveTab } = tabState;
    // const [noteEdited, setNoteEdited] = useState(false);

    useEffect(() => {
        if (activeTab !== 0) {
            dispatch(thunkLoadNotebookNotes(notebook?.id))
        }
    }, [dispatch, notebook, edited, activeTab, deleted]);

    useEffect(() => {
        if (notes) {
            setNoteList(Object.values(notes))
        }
    }, [notes]);

    const handleNoteDoubleClick = (note) => {
        setSelectedNote(note);
    }

    return (
        <div className="text-notebook-display">
            <NotebookHeader setNotebookAdded={setNotebookAdded} notebook={notebook} editState={editState}/>
            {notebook?.id && <DeleteButton type={"TEXT_NOTEBOOK"} id={notebook?.id} setIsDeleted={setDeleted} />}
            {
                noteList?.length ?
                    noteList.map((note) => (
                        <TextNoteCard
                            key={note.id}
                            note={note}
                            onDoubleClick={() => handleNoteDoubleClick(note)}
                        />
                ))
                :null

            }
        </div>
    )
};
export default TextNotebook;


import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { thunkAddTextNotebook, thunkLoadNotebooks } from "../../../store/notebooks";

//add errors in here
const NotebookForm = ({setNotebookAdded, notebook, editState}) => {

    const [name, setName] = useState(notebook?.id ? notebook?.name : "");
    const dispatch = useDispatch();

    const handleSubmit = (e) => {
        e.preventDefault();
        const newNotebook = {
            name
        };
        if (notebook?.id) {
            let {setEdited} = editState
            dispatch(thunkAddTextNotebook(newNotebook, notebook?.id))
            setEdited(false);
        }
        else {

            dispatch(thunkAddTextNotebook(newNotebook, false))
            setNotebookAdded(true);
        };
        dispatch(thunkLoadNotebooks())
        reset();
    };

    const reset = () => {
        setName("");
    };

    return (
        <div className="input-box">
           {/* { !notebook?.name ? <h1>Create Notebook</h1> : null} */}
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    onChange={(e) => setName(e.target.value)}
                    value={name}
                    placeholder={notebook?.name ? "Name your notebook..." : "Add a notebook..."}
                    name="title"
                    className ={notebook?.name ? "edit-notebook-form" : "add-notebook-form"}
                />
                {/* <button type="submit">Submit</button> */}
            </form>
        </div>
    );
};

export default NotebookForm;




import React, { useState, useEffect } from "react";
import NotebookForm from "../CreateForms/NotebookForm";
const NotebookHeader = ({ notebook, setNotebookAdded,  editState}) => {
    // this allows me to have the component pass through a render without breaking before state variables have been set.
    // if editState doesn't exist, it allows setisediting to still be a function that doesnt do anything. more or less
    // a temporary "null" value for the function so that my useEffect doesnt break my code.
    const { edited, setEdited } = editState ? editState : { edited: false, setEdited: () => {}};
    useEffect(() => {
    }, [edited, setEdited]);

    const handleDoubleClick = () => {
        setEdited(true);
    };

    return (
        <div className="notebook-header">
            {
                edited
                    ? (<NotebookForm notebook={notebook} editState={editState} setNotebookAdded={setNotebookAdded} />)
                    : (<h3 className='notebook-header-title' onDoubleClick={handleDoubleClick}>{notebook?.name}</h3>)
            }
            { notebook && <div className="component-instructions">Double Click the notebook title above to edit. Double click a note to edit</div>}

        </div>
    );
}

export default NotebookHeader;
